class Solution {
public:
    double helper(vector<vector<double>> &dp , int poured , int qr , int qg)
    {
        double res = 0;
        if(qr<0 or qg<0) return 0;
        if(qr==0 and qg==0) return poured;
        if(dp[qr][qg] != -1)
        {
            return dp[qr][qg];
        }
        double op1 = helper(dp , poured , qr-1, qg-1)-1;
        if(op1<0)
        {
            op1=0;
        }
        double op2 = helper(dp , poured , qr-1 , qg)-1;
        if(op2<0)
        {
            op2=0;
        }
        return dp[qr][qg] = (op1+op2)/2;
    }
    double champagneTower(int poured, int qr, int qg) 
    {
        vector<vector<double>> dp(qr+1 , vector<double>(qg+1 , -1));
        if(helper(dp , poured , qr , qg)>1)
        {
            return 1;
        }   
        return helper(dp , poured , qr , qg);
    }
};
