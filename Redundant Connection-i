class Solution {
public:
    bool dfs(int src , vector<vector<int>> &adj , vector<bool> &vis , int parent)
    {
        vis[src] = true;
        for(auto it : adj[src])
        {
            if(vis[it]==false)
            {
                if(dfs(it , adj , vis , src)==1)
                {
                    return 1;
                }
            }
            else if(it != parent)
            {
                return 1;
            }
        }
        return 0;
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) 
    {
        int n= edges.size();
        //vector<bool> vis(n+1 , false);
        vector<vector<int>> adj(n+1);
        for(auto i: edges)
        {
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
            vector<bool> vis(n+1 , false);
            if(dfs(i[0] , adj , vis , -1)==1)
            {
                return i;
            }
        }    
        return {};
    }
};
