class Solution {
public:
void dfs(vector<bool> &vis , vector<vector<int>> &adj , int start)
{
    vis[start]= true;
    int n= adj.size();
    for(auto src: adj[start])
    {
        if(vis[src]==0)
        {
            dfs(vis , adj , src);
        }
    }
}
    int findCircleNum(vector<vector<int>>& grid) 
    {
        int cnt=0;
        int n= grid.size();
        vector<vector<int>> adj(n+1);
        vector<bool> vis(n , 0);    
        /*for(auto i: grid)
        {
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }*/
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(i==j) continue;
                if(grid[i][j]==1 and i!= j)
                {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        for(int i=0; i<n; i++)
        {
            if(vis[i]==0)
            {
                cnt++;
                dfs(vis , adj , i);
            }
        }
        cout<<cnt<<endl;
        return cnt;
    }
};
