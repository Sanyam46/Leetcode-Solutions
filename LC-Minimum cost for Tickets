class Solution {
public:
    int helper(int i, vector<int> &days, vector<int> &dp, vector<int> &costs)
    {
        int n=days.size();
        if(i>=n)
        {
            return 0;
        }
        if(dp[i]!= -1)
        {
            return dp[i];
        }
        int op1 = costs[0] + helper(i+1, days, dp, costs);
        int j=i;
        while(j<n and days[j]<days[i]+7)
        {
            j++;
        }
        int op2 = costs[1] + helper(j , days , dp , costs);
        j=i;
        while(j<n and days[j]<days[i]+30)
        {
            j++;
        }
        int op3 = costs[2] + helper(j , days , dp , costs);
        int res = min(op1, min(op2, op3));
        return dp[i]=res;
    }
    int mincostTickets(vector<int>& days, vector<int>& costs) 
    {
        int n=days.size();
        vector<int> dp(n, -1);
        return helper(0, days, dp, costs);
    }
};
